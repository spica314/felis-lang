#entrypoint main;

#use_builtin "syscall" #as __syscall;
#use_builtin "u64_add" #as __u64_add;
#use_builtin "u64_sub" #as __u64_sub;
#use_builtin "u64_div" #as __u64_div;
#use_builtin "u64_mod" #as __u64_mod;
#use_builtin "u64_eq" #as __u64_eq;
#use_builtin "u64" #as __u64;

#proc print_c : (x: __u64) -> () {
    #let #mut y @ y_ref = x;
    __syscall 1 1 y_ref 1 0 0;
}

#proc print_num3 : (x: __u64) -> () {
    #let d0 = __u64_mod x 10;
    #let r0 = __u64_sub x d0;
    #let s0 = __u64_div r0 10;

    #let d1 = __u64_mod s0 10;
    #let r1 = __u64_sub s0 d1;
    #let s1 = __u64_div r1 10;

    #let d2 = __u64_mod s1 10;

    #let d0c = __u64_add d0 48;
    #let d1c = __u64_add d1 48;
    #let d2c = __u64_add d2 48;

    #if __u64_eq d2 0 {
        #if __u64_eq d1 0 {
            print_c d0c;
        } #else {
            print_c d1c;
            print_c d0c;
        };
    } #else {
        print_c d2c;
        print_c d1c;
        print_c d0c;
    };
}

#proc main : () -> () {
    print_num3 123;
    print_c 10;
    print_num3 12;
    print_c 10;
    print_num3 1;
    print_c 10;
    print_num3 0;
    print_c 10;

    #let syscall_id = 231u64;
    #let error_code = 0u64;
    __syscall syscall_id error_code 0 0 0 0;
}
