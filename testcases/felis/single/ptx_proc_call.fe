#entrypoint main2;

#use_builtin "syscall" #as __syscall;
#use_builtin "syscall" #as __syscall;
#use_builtin "u64_add" #as __u64_add;
#use_builtin "u64_sub" #as __u64_sub;
#use_builtin "u64_div" #as __u64_div;
#use_builtin "u64_mod" #as __u64_mod;
#use_builtin "u64_mul" #as __u64_mul;
#use_builtin "u64_eq" #as __u64_eq;
#use_builtin "u64" #as __u64;
#use_builtin "f32" #as __f32;
#use_builtin "f32_mul" #as __f32_mul;
#use_builtin "f32_div" #as __f32_div;
#use_builtin "u64_to_f32" #as __u64_to_f32;
#use_builtin "f32_to_u64" #as __f32_to_u64;
#use_builtin "ctaid_x" #as __ctaid_x;
#use_builtin "ntid_x" #as __ntid_x;
#use_builtin "tid_x" #as __tid_x;

#array Pixels {
    #members {
        r: __u64,
        g: __u64,
        b: __u64,
    },
    #dimension: 1,
}

#struct Vec3 {
    x: __f32,
    y: __f32,
    z: __f32,
}

#ptx #proc vec3_mul : (a: Vec3) -> (b: Vec3) -> Vec3 {
    #let x = __f32_mul a.x b.x;
    #let y = __f32_mul a.y b.y;
    #let z = __f32_mul a.z b.z;

    #return Vec3 {
        x: x,
        y: y,
        z: z,
    };
}

#ptx #proc f : (ps: Pixels) -> () {
    #let thread_id_sub = __u64_mul __ctaid_x __ntid_x;
    #let thread_id = __u64_add thread_id_sub __tid_x;
    #let h = 2;
    #let w = 2;
    #let x = __u64_mod thread_id w;
    #let y_sub1 = __u64_div thread_id w;
    #let y_sub2 = __u64_sub h y_sub1;
    #let y = __u64_sub y_sub2 1;

    #let r_sub1 = __u64_to_f32 x;
    #let r_sub2 = __u64_to_f32 w;
    #let r = __f32_div r_sub1 r_sub2;

    #let g_sub1 = __u64_to_f32 y;
    #let g_sub2 = __u64_to_f32 h;
    #let g = __f32_div g_sub1 g_sub2;

    #let b = __f32 0.2;

    #let v1 = Vec3 {
        x: r,
        y: g,
        z: b,
    };

    #let v2 = Vec3 {
        x: __f32 255.99,
        y: __f32 255.99,
        z: __f32 255.99,
    };

    #let v = vec3_mul v1 v2;

    #let ir = __f32_to_u64 v.x;
    #let ig = __f32_to_u64 v.y;
    #let ib = __f32_to_u64 v.z;

    ps .r thread_id <- ir;
    ps .g thread_id <- ig;
    ps .b thread_id <- ib;
}

#proc print_c : (x: __u64) -> () {
    #let #mut y @ y_ref = x;
    __syscall 1 1 y_ref 1 0 0;
}

#proc print_num3 : (x: __u64) -> () {
    #let d0 = __u64_mod x 10;
    #let r0 = __u64_sub x d0;
    #let s0 = __u64_div r0 10;

    #let d1 = __u64_mod s0 10;
    #let r1 = __u64_sub s0 d1;
    #let s1 = __u64_div r1 10;

    #let d2 = __u64_mod s1 10;

    #let d0c = __u64_add d0 48;
    #let d1c = __u64_add d1 48;
    #let d2c = __u64_add d2 48;

    #if __u64_eq d2 0 {
        #if __u64_eq d1 0 {
            print_c d0c;
        } #else {
            print_c d1c;
            print_c d0c;
        };
    } #else {
        print_c d2c;
        print_c d1c;
        print_c d0c;
    };
}

#proc main2 : () -> () {
    #let ps = Pixels::#new_with_size 65536;

    #call_ptx f ps 2 1 1 2 1 1;

    print_c 80;
    print_c 51;
    print_c 10;
    print_num3 2;
    print_c 32;
    print_num3 2;
    print_c 10;
    print_num3 255;
    print_c 10;

    #let r0 = ps .r 0 .*;
    #let g0 = ps .g 0 .*;
    #let b0 = ps .b 0 .*;
    print_num3 r0;
    print_c 32;
    print_num3 g0;
    print_c 32;
    print_num3 b0;
    print_c 10;

    #let r1 = ps .r 1 .*;
    #let g1 = ps .g 1 .*;
    #let b1 = ps .b 1 .*;
    print_num3 r1;
    print_c 32;
    print_num3 g1;
    print_c 32;
    print_num3 b1;
    print_c 10;

    #let r2 = ps .r 2 .*;
    #let g2 = ps .g 2 .*;
    #let b2 = ps .b 2 .*;
    print_num3 r2;
    print_c 32;
    print_num3 g2;
    print_c 32;
    print_num3 b2;
    print_c 10;

    #let r3 = ps .r 3 .*;
    #let g3 = ps .g 3 .*;
    #let b3 = ps .b 3 .*;
    print_num3 r3;
    print_c 32;
    print_num3 g3;
    print_c 32;
    print_num3 b3;
    print_c 10;

    __syscall 231 42 0 0 0 0;
}
