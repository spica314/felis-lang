#inductive eq : (A : Set) -> (x : A) -> A -> Prop {
    eq_refl: (A : Set) -> (x : A) -> eq A x x,
}

#inductive nat : Set {
    O: nat,
    S: nat -> nat,
}

#definition add : (n : nat) -> (m : nat) -> nat {
    #match n {
        O => m,
        S p => S (add p m),
    }
}

#theorem add_0_1_eq_add_1_1 : eq nat (add O (S O)) (add (S O) (S O)) {
    eq_refl nat (S O)
}
