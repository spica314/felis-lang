#type Nat : Set {
    zero: Nat,
    succ: Nat -> Nat,
}

#fn add (x: Nat) (y: Nat) -> Nat {
    match x {
        zero => y,
        succ x2 => succ (add x2 y),
    }
}

#type Eq : (T : Set) -> T -> T -> Prop {
    eq : (T : Set) -> (z : T) -> Eq T z z
}

#theorem theorem1 = #forall (x : Nat), #forall (y : Nat), Eq Nat (add x y) (add x y) {
    #fn f (x : Nat) (y : Nat) -> Eq Nat (add x y) (add x y) {
        match x {
            zero => {
                // Eq Nat (add zero y) (add zero y)
                //   by reduction
                // Eq Nat y y
                eq Nat y
            }
            succ x2 => {
                // Eq Nat (succ (add x2 y)) (succ (add x2 y))
                // with Eq Nat (add x2 y) (add x2 y)
                let t : Eq Nat (add x2 y) (add x2 y) = f x2 y;
                match t {
                    eq _ s => {
                        eq Nat (succ s),
                    }
                }
            }
        }
    }
}

#theorem theorem2 = #forall (x : Nat), #forall (y : Nat), #forall (z : Nat), Eq Nat (add (add x y) z) (add x (add y z)) {
    #fn f (x : Nat) (y : Nat) (z : Nat) -> Eq Nat (add (add x y) z) (add x (add y z)) {
        match x {
            zero => {
                // Eq Nat (add (add zero y) z) (add zero (add y z))
                //   by reduction
                // Eq Nat (add y z) (add y z)
                eq Nat (add y z)
            }
            succ x2 => {
                // Eq Nat (add (add (succ x2) y) z) (add (succ x2) (add y z))
                //   by reduction
                // Eq Nat (add (succ (add (x2 y))) z) (succ (add x2 (add y z)))
                //   by reduction
                // Eq Nat (succ (add (add (x2 y)) z)) (succ (add x2 (add y z)))
                // with Eq Nat (add (add x2 y) z) (add x2 (add y z))
                let t : Eq Nat (add (add x2 y) z) (add x2 (add y z)) = f x2 y z;
                match t {
                    eq _ s => eq Nat (succ s)
                }
            }
        }
    }
}
