#entrypoint main2;

#use_builtin "syscall" #as __syscall;
#use_builtin "syscall" #as __syscall;
#use_builtin "u64_add" #as __u64_add;
#use_builtin "u64_sub" #as __u64_sub;
#use_builtin "u64_div" #as __u64_div;
#use_builtin "u64_mod" #as __u64_mod;
#use_builtin "u64_mul" #as __u64_mul;
#use_builtin "u64_eq" #as __u64_eq;
#use_builtin "u64" #as __u64;
#use_builtin "f32" #as __f32;
#use_builtin "f32_add" #as __f32_add;
#use_builtin "f32_sub" #as __f32_sub;
#use_builtin "f32_mul" #as __f32_mul;
#use_builtin "f32_div" #as __f32_div;
#use_builtin "f32_sqrt_approx" #as __f32_sqrt_approx;
#use_builtin "u64_to_f32" #as __u64_to_f32;
#use_builtin "f32_to_u64" #as __f32_to_u64;
#use_builtin "ctaid_x" #as __ctaid_x;
#use_builtin "ntid_x" #as __ntid_x;
#use_builtin "tid_x" #as __tid_x;
#use_builtin "Array" #as __Array;

#struct Vec3 {
    x: f32,
    y: f32,
    z: f32,
}

#struct Ray {
    origin: Vec3,
    dir: Vec3,
}

#struct Pixels {
    r: __Array __u64,
    g: __Array __u64,
    b: __Array __u64,
}

#ptx #proc vec3_add : (a: Vec3) -> (b: Vec3) -> Vec3 {
    #let x = __f32_add (a.x) (b.x);
    #let y = __f32_add (a.y) (b.y);
    #let z = __f32_add (a.z) (b.z);

    #return Vec3 {
        x: x,
        y: y,
        z: z,
    };
}

#ptx #proc vec3_sub : (a: Vec3) -> (b: Vec3) -> Vec3 {
    #let x = __f32_sub a.x b.x;
    #let y = __f32_sub a.y b.y;
    #let z = __f32_sub a.z b.z;

    #return Vec3 {
        x: x,
        y: y,
        z: z,
    };
}

#ptx #proc vec3_mul : (a: Vec3) -> (b: Vec3) -> Vec3 {
    #let x = __f32_mul a.x b.x;
    #let y = __f32_mul a.y b.y;
    #let z = __f32_mul a.z b.z;

    #return Vec3 {
        x: x,
        y: y,
        z: z,
    };
}

#ptx #proc vec3_mul_f32 : (a: Vec3) -> (b: __f32) -> Vec3 {
    #let x = __f32_mul (a.x) b;
    #let y = __f32_mul (a.y) b;
    #let z = __f32_mul (a.z) b;

    #return Vec3 {
        x: x,
        y: y,
        z: z,
    };
}

#ptx #proc vec3_div_f32 : (a: Vec3) -> (b: __f32) -> Vec3 {
    #let x = __f32_div (a.x) b;
    #let y = __f32_div (a.y) b;
    #let z = __f32_div (a.z) b;

    #return Vec3 {
        x: x,
        y: y,
        z: z,
    };
}

#ptx #proc vec3_div : (a: Vec3) -> (b: Vec3) -> Vec3 {
    #let x = __f32_div a.x b.x;
    #let y = __f32_div a.y b.y;
    #let z = __f32_div a.z b.z;

    #return Vec3 {
        x: x,
        y: y,
        z: z,
    };
}

#ptx #proc vec3_length : (a: Vec3) -> Vec3 {
    #let x2 = __f32_mul a.x a.x;
    #let y2 = __f32_mul a.y a.y;
    #let z2 = __f32_mul a.z a.z;

    #let sum_1 = __f32_add x2 y2;
    #let sum = __f32_add sum_1 z2;

    #let s = __f32_sqrt_approx sum;
    #return Vec3 {
        x: s,
        y: s,
        z: s,
    };
}

#ptx #proc ray_color : (dir: Vec3) -> Vec3 {
    #let dir_length = vec3_length dir;
    #let dir_length_x = dir_length.x;
    #let divvec = Vec3 {
        x: dir_length_x,
        y: dir_length_x,
        z: dir_length_x,
    };
    #let unit_dir = vec3_div dir divvec;
    #let one = __f32 1.0;
    #let a_1 = __f32_add (unit_dir.y) one;
    #let half = __f32 0.5;
    #let a = __f32_mul a_1 half;

    #let r_1 = __f32_sub one a;
    #let r_2 = Vec3 {
        x: __f32 1.0,
        y: __f32 1.0,
        z: __f32 1.0,
    };
    #let r_3 = vec3_mul_f32 r_2 r_1;
    #let r_4 = Vec3 {
        x: __f32 0.5,
        y: __f32 0.7,
        z: __f32 1.0,
    };
    #let r_5 = vec3_mul_f32 r_4 a;
    #let r = vec3_add r_3 r_5;
    #return Vec3 {
        x: r.x,
        y: r.y,
        z: r.z,
    };
}

#ptx #proc f : (ps: Pixels) -> () {
    #let thread_id_sub = __u64_mul __ctaid_x __ntid_x;
    #let thread_id = __u64_add thread_id_sub __tid_x;
    #let h = 180;
    #let w = 320;
    #let x = __u64_mod thread_id w;
    #let y = __u64_div thread_id w;
    #let zero = __f32_sub (__f32 1.0) (__f32 1.0);

    #let aspect_ratio = __f32_div (__f32 16.0) (__f32 9.0);

    #let focal_length = __f32 1.0;
    #let viewport_height = __f32 2.0;
    #let viewport_width = __f32_mul viewport_height aspect_ratio;
    #let camera_center = Vec3 {
        x: zero,
        y: zero,
        z: zero,
    };

    #let viewport_u = Vec3 {
        x: viewport_width,
        y: zero,
        z: zero,
    };
    #let viewport_v = Vec3 {
        x: zero,
        y: __f32_sub zero viewport_height,
        z: zero,
    };

    #let w_f32 = __f32 320.0;
    #let w_f32_vec3 = Vec3 {
        x: w_f32,
        y: w_f32,
        z: w_f32,
    };
    #let pixel_delta_u = vec3_div viewport_u w_f32_vec3;
    #let h_f32 = __f32 180.0;
    #let h_f32_vec3 = Vec3 {
        x: h_f32,
        y: h_f32,
        z: h_f32,
    };
    #let pixel_delta_v = vec3_div viewport_v h_f32_vec3;

    #let two = __f32 2.0;
    #let two_vec = Vec3 {
        x: two,
        y: two,
        z: two,
    };
    #let camera_shift = Vec3 {
        x: zero,
        y: zero,
        z: focal_length,
    };
    #let viewport_u_half = vec3_div viewport_u two_vec;
    #let viewport_v_half = vec3_div viewport_v two_vec;
    #let viewport_upper_left_1 = vec3_sub camera_center camera_shift;
    #let viewport_upper_left_2 = vec3_sub viewport_upper_left_1 viewport_u_half;
    #let viewport_upper_left = vec3_sub viewport_upper_left_2 viewport_v_half;

    #let pixel_delta_u_plus_v = vec3_add pixel_delta_u pixel_delta_v;
    #let pixel_delta_u_plus_v_half = vec3_div pixel_delta_u_plus_v two_vec;
    #let pixel00_loc = vec3_add viewport_upper_left pixel_delta_u_plus_v_half;

    #let x_f32 = __u64_to_f32 x;
    #let y_f32 = __u64_to_f32 y;

    #let pixel_center_1 = vec3_mul_f32 pixel_delta_u x_f32;
    #let pixel_center_2 = vec3_mul_f32 pixel_delta_v y_f32;
    #let pixel_center_3 = vec3_add pixel00_loc pixel_center_1;
    #let pixel_center = vec3_add pixel_center_3 pixel_center_2;

    #let ray_direction = vec3_sub pixel_center camera_center;

    #let color = ray_color ray_direction;

    #let v2 = Vec3 {
        x: __f32 255.99,
        y: __f32 255.99,
        z: __f32 255.99,
    };

    #let v = vec3_mul color v2;

    #let ir = __f32_to_u64 v.x;
    #let ig = __f32_to_u64 v.y;
    #let ib = __f32_to_u64 v.z;

    ps.r .set thread_id ir;
    ps.g .set thread_id ig;
    ps.b .set thread_id ib;
}

#proc print_c : (x: __u64) -> () {
    #let #mut y @ y_ref = x;
    __syscall 1 1 y_ref 1 0 0;
}

#proc print_num3 : (x: __u64) -> () {
    #let d0 = __u64_mod x 10;
    #let r0 = __u64_sub x d0;
    #let s0 = __u64_div r0 10;

    #let d1 = __u64_mod s0 10;
    #let r1 = __u64_sub s0 d1;
    #let s1 = __u64_div r1 10;

    #let d2 = __u64_mod s1 10;

    #let d0c = __u64_add d0 48;
    #let d1c = __u64_add d1 48;
    #let d2c = __u64_add d2 48;

    #if __u64_eq d2 0 {
        #if __u64_eq d1 0 {
            print_c d0c;
        } #else {
            print_c d1c;
            print_c d0c;
        };
    } #else {
        print_c d2c;
        print_c d1c;
        print_c d0c;
    };
}

#proc main2 : () -> () {
    #let r = __Array::new_with_size 65536;
    #let g = __Array::new_with_size 65536;
    #let b = __Array::new_with_size 65536;
    #let ps = Pixels {
        r: r,
        g: g,
        b: b,
    };

    #call_ptx f ps 320 1 1 180 1 1;

    print_c 80;
    print_c 51;
    print_c 10;
    print_num3 320;
    print_c 32;
    print_num3 180;
    print_c 10;
    print_num3 255;
    print_c 10;

    #let #mut i @ y_ref = 1;

    #loop {
        #if __u64_eq i 57600 {
            #break;
        };

        #let r = (ps.r .get i .*);
        print_num3 r;
        print_c 32;

        #let g = (ps.g .get i .*);
        print_num3 g;
        print_c 32;

        #let b = (ps.b .get i .*);
        print_num3 b;
        print_c 10;

        y_ref <- __u64_add i 1;
    };

    __syscall 231 0 0 0 0 0;
}
